{"version":3,"file":"components-progress_bar-__stories__-ProgressBar-stories.8f88855b.iframe.bundle.js","mappings":";;;;;;;AAkBA","sources":["webpack://retro-react/./src/components/progress_bar/ProgressBar.styled.tsx"],"sourcesContent":["import { css, keyframes } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\nimport {\r\n\tComponentPatterns,\r\n\tgetPatternScheme,\r\n} from '@src/utils/getPatternScheme';\r\nimport { rgba } from '@src/utils/rgba';\r\nimport { BLACK, PRIMARY, WHITE } from '@src/constants/colors';\r\n\r\nconst move = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 0%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 100% 0%;\r\n\t}\r\n`;\r\n\r\nexport const ProgressBarWrapper = styled.div`\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbox-sizing: border-box;\r\n`;\r\n\r\nexport const ProgressBar = styled.div<{\r\n\t$bg?: string;\r\n\t$value: number;\r\n\t$color?: string;\r\n\t$pattern: ComponentPatterns;\r\n\t$animated?: boolean;\r\n}>`\r\n\tbackground-image: url(${getPatternScheme('noise')});\r\n\r\n\tbackground-color: ${(props) => props.$bg || WHITE};\r\n\tborder-radius: 0.5rem;\r\n\tpadding: 1rem;\r\n\tfont-size: 1.5rem;\r\n\tbox-shadow: 1px 1px 2px ${rgba(BLACK, 0.5)},\r\n\t\t-1px -1px 2px ${(props) => props.$bg || WHITE};\r\n\r\n\t&::before {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground-image: url(${getPatternScheme('noise')});\r\n\t\tpadding: 0.5rem;\r\n\t\topacity: 0.5;\r\n\t\tfilter: blur(0.8rem) brightness(0.5);\r\n\t}\r\n\r\n\t&::after {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 5px;\r\n\t\twidth: calc(${(props) => Math.min(Math.max(props.$value, 0), 100)}% - 10px);\r\n\t\theight: 100%;\r\n\t\tbackground-color: ${(props) => props.$color || PRIMARY};\r\n\t\tborder-radius: ${(props) =>\r\n\t\t\tprops.$value >= 100 ? '0.5rem' : '0.5rem 0 0 0.5rem'};\r\n\t\topacity: 0.5;\r\n\t\tmargin: 0.3rem 0;\r\n\r\n\t\tbackground-image: url(${(props) => getPatternScheme(props.$pattern)});\r\n\t\tbackground-repeat: repeat;\r\n\t\tbox-shadow: 1px 1px 2px ${rgba(BLACK, 0.5)};\r\n\r\n\t\t${(props) =>\r\n\t\t\tprops.$animated &&\r\n\t\t\tprops.$pattern !== 'solid' &&\r\n\t\t\tcss`\r\n\t\t\t\tanimation: ${move} ${props.$value * 0.2}s linear infinite;\r\n\t\t\t`}\r\n\t}\r\n\r\n\t${({ $bg }) =>\r\n\t\t$bg === 'none' &&\r\n\t\t`\r\n\tbox-shadow: none;\r\n\tbackground: none;\r\n\r\n\t&::before {\r\n\t\tcontent: none;\r\n\t}\r\n\r\n`}\r\n`;\r\n"],"names":[],"sourceRoot":""}