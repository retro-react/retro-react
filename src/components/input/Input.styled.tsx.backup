import { css, keyframes } from '@emotion/react';
import styled from '@emotion/styled';
import { alterColorEnhanced } from '@src/utils/alterColor';
import getColorScheme, { ComponentColors } from '@src/utils/getColorScheme';
import { rgba } from '@src/utils/rgba';
import { SYSTEM_FONT, TERMINAL_FONT, FONT_SIZES } from '@src/constants/fonts';
import { 
	VGA_BLACK, 
	VGA_WHITE, 
	WIN31_BUTTON_FACE, 
	WIN31_BUTTON_SHADOW, 
	WIN31_BUTTON_HIGHLIGHT,
	CRT_GREEN 
} from '@src/constants/colors';
import { crtFlicker, terminalBlink } from '@src/utils/retroEffects';
import { InputSizes, InputVariants } from './Input';

const sizeStyles = {
	small: { fontSize: FONT_SIZES.TINY, padding: '2px 4px' },
	medium: { fontSize: FONT_SIZES.NORMAL, padding: '4px 6px' },
	large: { fontSize: FONT_SIZES.MEDIUM, padding: '6px 8px' },
};

const getInputVariantStyles = (variant: InputVariants, color: string) => {
	// Authentic Windows 3.1/95 sunken input field
	const retroInsetStyles = css`
		border: 2px solid;
		border-color: ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_HIGHLIGHT} ${WIN31_BUTTON_HIGHLIGHT} ${WIN31_BUTTON_SHADOW};
		background: ${VGA_WHITE};
		box-shadow: inset 1px 1px 2px rgba(0, 0, 0, 0.3);
	`;

	// Authentic raised/button-like input
	const retroOutsetStyles = css`
		border: 2px solid;
		border-color: ${WIN31_BUTTON_HIGHLIGHT} ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_HIGHLIGHT};
		background: ${WIN31_BUTTON_FACE};
		box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.5);
	`;

	// Authentic CRT terminal input
	const terminalStyles = css`
		background: ${VGA_BLACK};
		color: ${CRT_GREEN};
		font-family: ${TERMINAL_FONT};
		font-weight: normal;
		text-shadow: 0 0 8px ${CRT_GREEN};
		border: 2px solid #333;
		box-shadow: 
			inset 0 0 10px rgba(0, 255, 65, 0.3),
			0 0 20px rgba(0, 0, 0, 0.8);
		animation: ${crtFlicker} 3s infinite linear;
		letter-spacing: 0.05em;

		&::placeholder {
			color: rgba(0, 255, 65, 0.4);
			animation: ${terminalBlink} 1.5s infinite;
		}

		&:focus {
			text-shadow: 0 0 12px ${CRT_GREEN};
			box-shadow: 
				inset 0 0 15px rgba(0, 255, 65, 0.4),
				0 0 25px rgba(0, 0, 0, 0.9);
		}
	`;

	// Classic Windows input field (default)
	const classicWindowsStyles = css`
		background: ${VGA_WHITE};
		${retroInsetStyles}
		color: ${VGA_BLACK};
		font-family: ${SYSTEM_FONT};
		font-size: ${FONT_SIZES.NORMAL};
		font-weight: normal;
		
		/* Remove modern styling */
		border-radius: 0;
		transition: none;

		&::placeholder {
			color: ${WIN31_BUTTON_SHADOW};
			font-style: normal;
		}

		&:focus {
			background: ${VGA_WHITE};
			/* Authentic Windows focus - just a dotted border inside */
			outline: 1px dotted ${VGA_BLACK};
			outline-offset: -3px;
		}

		&:disabled {
			background: ${WIN31_BUTTON_FACE};
			color: ${WIN31_BUTTON_SHADOW};
			border-color: ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_SHADOW} ${WIN31_BUTTON_SHADOW};
		}
	`;

	// Retro filled style - colored input with texture
	const retroFilledStyles = css`
		background: ${WIN31_BUTTON_FACE};
		${retroOutsetStyles}
		border-color: ${alterColorEnhanced(color, 40)} ${alterColorEnhanced(color, -40)} ${alterColorEnhanced(color, -40)} ${alterColorEnhanced(color, 40)};
		color: ${VGA_BLACK};
		font-weight: normal;

		&::placeholder {
			color: ${WIN31_BUTTON_SHADOW};
		}

		&:focus {
			background: ${VGA_WHITE};
			border-color: ${alterColorEnhanced(color, 50)} ${alterColorEnhanced(color, -50)} ${alterColorEnhanced(color, -50)} ${alterColorEnhanced(color, 50)};
			outline: 1px dotted ${VGA_BLACK};
			outline-offset: -3px;
		}
	`;

	// Retro outlined style - just colored border
	const retroOutlinedStyles = css`
		${classicWindowsStyles}
		border-color: ${alterColorEnhanced(color, -20)} ${alterColorEnhanced(color, 20)} ${alterColorEnhanced(color, 20)} ${alterColorEnhanced(color, -20)};

		&:focus {
			border-color: ${alterColorEnhanced(color, -30)} ${alterColorEnhanced(color, 30)} ${alterColorEnhanced(color, 30)} ${alterColorEnhanced(color, -30)};
		}
	`;

	switch (variant) {
		case 'outlined':
			return retroOutlinedStyles;
		case 'filled':
			return retroFilledStyles;
		case 'terminal':
			return terminalStyles;
		case 'classic':
			return classicWindowsStyles;
		default:
			return retroFilledStyles;
	}
};

export const Input = styled.input<{
	$variant: InputVariants;
	$color: ComponentColors | 'greyscale';
	$size: InputSizes;
	$rounded: boolean;
	$multiline: boolean;
	$retro?: boolean;
	$scanlines?: boolean;
}>`
	/* Base styles */
	border-radius: 2px; /* Sharp corners like classic Windows */
	font-family: ${({ $variant }) =>
		$variant === 'terminal'
			? "'Courier New', 'Lucida Console', Monaco, monospace"
			: $variant === 'classic'
			? "'MS Sans Serif', 'Trebuchet MS', Tahoma, sans-serif"
			: "'Trebuchet MS', 'MS Sans Serif', Helvetica, sans-serif"};
	transition: none; /* Remove modern transitions for authentic feel */
	outline: none;
	border: none;

	/* Size styles */
	${({ $size }) => {
		const sizeConfig = sizeStyles[$size as keyof typeof sizeStyles] || {
			fontSize: $size,
			padding: '0.75rem 1rem',
		};
		return css`
			font-size: ${sizeConfig.fontSize};
			padding: ${sizeConfig.padding};
		`;
	}}

	/* Variant styles */
	${({ $color, $variant, theme }) =>
		getInputVariantStyles(
			$variant,
			$color === 'greyscale' ? SHADE_4 : getColorScheme($color, theme),
		)}

	/* Special color handling for warn variant */
	${({ $color, $variant }) =>
		$variant === 'filled' &&
		$color === 'warn' &&
		css`
			color: ${BLACK};
			text-shadow: 0 0 2px ${rgba(BLACK, 0.4)};

			&::placeholder {
				color: ${rgba(BLACK, 0.7)};
				text-shadow: 1px 1px 1px ${rgba(SHADE_4, 0.4)};
			}
		`}

	/* Rounded corners */
	${({ $rounded, $variant }) =>
		$rounded &&
		css`
			border-radius: ${$variant === 'terminal'
				? '2px'
				: $variant === 'classic'
				? '1px'
				: '4px'};
		`}

	/* Multiline/textarea specific styles */
	${({ $multiline, theme, $variant, $color }) =>
		$multiline &&
		css`
			resize: vertical;
			min-height: 80px;
			overflow: auto;
			line-height: 1.4;

			&::-webkit-scrollbar {
				width: 0.75rem;
			}

			&::-webkit-scrollbar-track {
				background: ${$variant === 'terminal'
					? rgba(BLACK, 0.5)
					: alterColorEnhanced(
							$color === 'greyscale' ? SHADE_4 : getColorScheme($color, theme),
							50,
					  )};
				border-radius: 0.375rem;
			}

			&::-webkit-scrollbar-thumb {
				background: ${$variant === 'terminal'
					? rgba(
							$color === 'greyscale' ? WHITE : getColorScheme($color, theme),
							0.3,
					  )
					: alterColorEnhanced(
							$color === 'greyscale' ? SHADE_4 : getColorScheme($color, theme),
							-50,
					  )};
				border-radius: 0.375rem;
				border: 2px solid transparent;
				background-clip: content-box;
			}

			&::-webkit-scrollbar-thumb:hover {
				background: ${$variant === 'terminal'
					? rgba(
							$color === 'greyscale' ? WHITE : getColorScheme($color, theme),
							0.5,
					  )
					: SHADE_2};
			}
		`}

	/* Retro scanlines effect */
	${({ $scanlines, $color, theme }) =>
		$scanlines &&
		css`
			position: relative;

			&::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background-image: linear-gradient(
					transparent 50%,
					${rgba(
							$color === 'greyscale' ? WHITE : getColorScheme($color, theme),
							0.03,
						)}
						50%
				);
				background-size: 100% 4px;
				pointer-events: none;
				z-index: 1;
			}
		`}

	/* Disabled state */
	&:disabled {
		cursor: not-allowed;
		opacity: 0.5;
		filter: grayscale(0.3);

		${({ $variant }) =>
			$variant === 'terminal' &&
			css`
				animation: none;
				text-shadow: none;
				box-shadow: none;
			`}
	}

	/* Focus state - NO modern outline! */
	${({ $variant }) =>
		$variant !== 'terminal' &&
		css`
			&:focus {
				/* Focus handled by variant styles - no additional outline */
			}
		`}

	/* Hover effects - subtle like classic Windows */
	&:hover:not(:disabled) {
		${({ $variant }) =>
			$variant === 'outlined' &&
			css`
				background: ${rgba(WHITE, 1)};
			`}

		${({ $variant }) =>
			$variant === 'terminal' &&
			css`
				filter: brightness(1.05);
			`}
		
		${({ $variant }) =>
			$variant === 'classic' &&
			css`
				background: ${rgba(WHITE, 1)};
			`}
	}
`;
